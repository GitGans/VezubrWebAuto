{"name": "test_cargo_place_multi_edit_lkz[lkz]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'sidebar_button' is not clickable", "trace": "self = <pages.sidebar.SideBar object at 0x00000171587B4E90>\nelement_info = {'name': 'sidebar_button', 'xpath': \"//button[@class='border narrow light-bold notBlocked top-nav__sidebar button-icon-menuHamburgerOrange element-button-icon element-button theme-simple']\"}\nwait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n>               element = WebDriverWait(self.driver, 60).until(\n\nbase\\base_class.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e3d03e148171c97cb1125e260d53c6e6\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000017158D32160>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63357B125+29573]\nE       \t(No symbol) [0x00007FF6334EFF50]\nE       \t(No symbol) [0x00007FF6333AB6EA]\nE       \t(No symbol) [0x00007FF6333FF815]\nE       \t(No symbol) [0x00007FF6333FFA6C]\nE       \t(No symbol) [0x00007FF63344B917]\nE       \t(No symbol) [0x00007FF63342733F]\nE       \t(No symbol) [0x00007FF6334486BC]\nE       \t(No symbol) [0x00007FF6334270A3]\nE       \t(No symbol) [0x00007FF6333F12DF]\nE       \t(No symbol) [0x00007FF6333F2441]\nE       \tGetHandleVerifier [0x00007FF6338AC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6338F7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6338ECF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF63363B2A6+816390]\nE       \t(No symbol) [0x00007FF6334FB25F]\nE       \t(No symbol) [0x00007FF6334F7084]\nE       \t(No symbol) [0x00007FF6334F7220]\nE       \t(No symbol) [0x00007FF6334E607F]\nE       \tBaseThreadInitThunk [0x00007FFEF1907374+20]\nE       \tRtlUserThreadStart [0x00007FFEF389CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'base_fixture' for <Function test_cargo_place_multi_edit_lkz[lkz]>>, domain = 'com'\n\n    @pytest.fixture\n    def base_fixture(request, domain):\n        # Ищем директорию, которая начинается с 'results_'\n        allure_dir = None\n        for dir_name in os.listdir('.'):\n            if dir_name.startswith('results_') and os.path.isdir(dir_name):\n                allure_dir = os.path.abspath(dir_name)  # Сохраняем путь к найденной директории\n                print(f\"Allure directory found and set: {allure_dir}\")\n                break\n    \n        # Получаем параметр из теста, который определяет тип теста и роль\n        role = request.param\n    \n        # Логика для выбора базового теста\n        if role == 'without_login':\n            base, login = base_test_without_login(domain)\n            base.allure_dir = allure_dir  # Устанавливаем директорию в base\n            yield base, login  # Возвращаем base и login вместо sidebar\n        elif role == 'via_link':\n            base, login = base_test_with_login_via_link(domain)\n            base.allure_dir = allure_dir  # Устанавливаем директорию в base\n            yield base, login  # Возвращаем base и login вместо sidebar\n        else:\n>           base, sidebar = base_test_with_login(domain, role)\n\ntests\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\base_test.py:13: in base_test_with_login\n    sidebar.click_button(sidebar.sidebar_button)\nbase\\base_class.py:414: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.sidebar.SideBar object at 0x00000171587B4E90>\nelement_info = {'name': 'sidebar_button', 'xpath': \"//button[@class='border narrow light-bold notBlocked top-nav__sidebar button-icon-menuHamburgerOrange element-button-icon element-button theme-simple']\"}\nwait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.element_to_be_clickable((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'visible':\n                element = WebDriverWait(self.driver, 15).until(\n                    EC.visibility_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'located':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.presence_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'find':\n                element = self.driver.find_element(By.XPATH, element_info['xpath'])\n            elif wait_type == 'invisibility':\n                WebDriverWait(self.driver, 60).until(\n                    EC.invisibility_of_element_located((By.XPATH, element_info['xpath'])))\n                element = None\n            else:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = \"\"\n            if wait_type == 'clickable':\n                message = f\"Element '{element_info['name']}' is not clickable\"\n            elif wait_type == 'visible':\n                message = f\"Element '{element_info['name']}' is not visible\"\n                with allure.step(message):\n                    print(message)\n                # Возвращаем None, чтобы тест продолжился\n                return {'name': element_info['name'], 'element': None}\n            elif wait_type == 'located':\n                message = f\"Element '{element_info['name']}' is not located\"\n            elif wait_type == 'find':\n                message = f\"Element '{element_info['name']}' is not found\"\n            elif wait_type == 'invisibility':\n                message = f\"Element '{element_info['name']}' is not invisible\"\n    \n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'sidebar_button' is not clickable\n\nbase\\base_class.py:174: TimeoutException"}, "description": "ЛКЗ. Тест массового редактирования ГМ: создаем - родительское ГМ, выбираем - 2-е и 3-е ГМ в списке, статус - Принято, адреса к статусу/отправления/доставки - Первый в списке, родительске ГМ - Созданное ГМ с баркодом - cp_stamp", "parameters": [{"name": "base_fixture", "value": "'lkz'"}], "start": 1728271447997, "stop": 1728271447997, "uuid": "2cb37ec4-b796-4ecb-b015-8a10b7802eb3", "historyId": "2dfb12e5b83b3c8d3d14052f1931ae6d", "testCaseId": "4ea13f4e82195052e928889ca2808ff1", "fullName": "tests.test_cargo_place_operations#test_cargo_place_multi_edit_lkz", "labels": [{"name": "feature", "value": "Массовое редактирование грузомест"}, {"name": "story", "value": "Critical path test"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_cargo_place_operations"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "14324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cargo_place_operations"}]}