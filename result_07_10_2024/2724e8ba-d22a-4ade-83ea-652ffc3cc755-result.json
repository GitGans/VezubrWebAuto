{"name": "test_cargo_place_transfer_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'publish_later_button' is not clickable", "trace": "self = <pages.request_delivery_add_page.DeliveryAdd object at 0x000001F25539E990>, element_info = {'name': 'publish_later_button', 'xpath': \"//button[.//span[text()='Опубликовать позже']]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n>               element = WebDriverWait(self.driver, 60).until(\n\nbase\\base_class.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"05c1a88b781c7c8e3e31af9687a05e25\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001F2558345E0>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63357B125+29573]\nE       \t(No symbol) [0x00007FF6334EFF50]\nE       \t(No symbol) [0x00007FF6333AB6EA]\nE       \t(No symbol) [0x00007FF6333FF815]\nE       \t(No symbol) [0x00007FF6333FFA6C]\nE       \t(No symbol) [0x00007FF63344B917]\nE       \t(No symbol) [0x00007FF63342733F]\nE       \t(No symbol) [0x00007FF6334486BC]\nE       \t(No symbol) [0x00007FF6334270A3]\nE       \t(No symbol) [0x00007FF6333F12DF]\nE       \t(No symbol) [0x00007FF6333F2441]\nE       \tGetHandleVerifier [0x00007FF6338AC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6338F7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6338ECF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF63363B2A6+816390]\nE       \t(No symbol) [0x00007FF6334FB25F]\nE       \t(No symbol) [0x00007FF6334F7084]\nE       \t(No symbol) [0x00007FF6334F7220]\nE       \t(No symbol) [0x00007FF6334E607F]\nE       \tBaseThreadInitThunk [0x00007FFEF1907374+20]\nE       \tRtlUserThreadStart [0x00007FFEF389CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001F2553E88D0>, <pages.sidebar.SideBar object at 0x000001F254669C10>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Передача грузомест экспедитору')\n    @allure.description('ЛКЭ. Тест передачи ГМ Экспедитору: '\n                        'создаем - ГМ ГВ, передаем - Экс, создаем - LTL заявку, публикация - не публикуем')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_cargo_place_transfer_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку грузомест\n        sidebar.move_and_click(move_to=sidebar.assignments_hover, click_to=sidebar.cargo_place_list_button,\n                               do_assert=True, wait=\"lst\")\n        time.sleep(1.5)\n        cp_list = CargoPlaceList(base.driver)\n        # Клик по кнопке добавления грузоместа\n        cp_list.click_button(cp_list.add_cargo_place_button, wait=\"form\")\n    \n        add_cp = CargoPlaceAdd(base.driver)\n        # Выбор владельца грузоместа \"Auto LKZ\"\n        add_cp.dropdown_click_input_click(add_cp.cargo_place_owner_select, \"Auto LKZ\")\n        # Добавление полного базового грузоместа\n        cp_stamp = add_cp.add_base_cargo_place_lke()\n    \n        cp_list = CargoPlaceList(base.driver)\n        # Сброс фильтров\n        cp_list.click_button(cp_list.reset_button, wait=\"lst\")\n        # Ввод штрихкода грузоместа в поле фильтрации\n        cp_list.input_in_field(cp_list.barcode_filter, value=cp_stamp, wait=\"lst\")\n        # Клик по кнопке экшен меню\n        cp_list.click_button(cp_list.action_menu_button)\n        # Клик по кнопке мультивыбор ГМ\n        cp_list.click_button(cp_list.multi_select_button)\n        # Выбор первого чек-бокса\n        cp_list.click_button(cp_list.cp_list_checkbox, index=3)\n        # Клик по кнопке передать экспедитору\n        cp_list.click_button(cp_list.multi_transfer_button)\n    \n        ltl = DeliveryAdd(base.driver)\n        # Заполнение базовой информации для LTL заявки\n        ltl.add_base_ltl()\n        time.sleep(1)\n        # Публикация заявки позже\n>       ltl.click_button(ltl.publish_later_button, do_assert=True)\n\ntests\\test_cargo_place_operations.py:299: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:414: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.request_delivery_add_page.DeliveryAdd object at 0x000001F25539E990>, element_info = {'name': 'publish_later_button', 'xpath': \"//button[.//span[text()='Опубликовать позже']]\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.element_to_be_clickable((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'visible':\n                element = WebDriverWait(self.driver, 15).until(\n                    EC.visibility_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'located':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.presence_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'find':\n                element = self.driver.find_element(By.XPATH, element_info['xpath'])\n            elif wait_type == 'invisibility':\n                WebDriverWait(self.driver, 60).until(\n                    EC.invisibility_of_element_located((By.XPATH, element_info['xpath'])))\n                element = None\n            else:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = \"\"\n            if wait_type == 'clickable':\n                message = f\"Element '{element_info['name']}' is not clickable\"\n            elif wait_type == 'visible':\n                message = f\"Element '{element_info['name']}' is not visible\"\n                with allure.step(message):\n                    print(message)\n                # Возвращаем None, чтобы тест продолжился\n                return {'name': element_info['name'], 'element': None}\n            elif wait_type == 'located':\n                message = f\"Element '{element_info['name']}' is not located\"\n            elif wait_type == 'find':\n                message = f\"Element '{element_info['name']}' is not found\"\n            elif wait_type == 'invisibility':\n                message = f\"Element '{element_info['name']}' is not invisible\"\n    \n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'publish_later_button' is not clickable\n\nbase\\base_class.py:174: TimeoutException"}, "description": "ЛКЭ. Тест передачи ГМ Экспедитору: создаем - ГМ ГВ, передаем - Экс, создаем - LTL заявку, публикация - не публикуем", "steps": [{"name": "Move to assignments_hover", "status": "passed", "start": 1728270248745, "stop": 1728270249557}, {"name": "Click on cargo_place_list_button", "status": "passed", "steps": [{"name": "Assert \"Задания\" == \"Задания\"", "status": "passed", "start": 1728270251045, "stop": 1728270251045}], "start": 1728270249660, "stop": 1728270251045}, {"name": "Click on add_cargo_place_button", "status": "passed", "start": 1728270252557, "stop": 1728270253672}, {"name": "Select 'Auto LKZ' from dropdown cargo_place_owner_select", "status": "passed", "start": 1728270253672, "stop": 1728270254824}, {"name": "Select 'Короб' from dropdown cargo_place_type_select", "status": "passed", "start": 1728270254824, "stop": 1728270255459}, {"name": "Backspace and input in cp_weight_input: 1044", "status": "passed", "start": 1728270255459, "stop": 1728270255547}, {"name": "Backspace and input in cp_value_input: 2.1", "status": "passed", "start": 1728270255547, "stop": 1728270255648}, {"name": "Backspace and input in cp_cost_input: 435016", "status": "passed", "start": 1728270255648, "stop": 1728270255740}, {"name": "Input in lke_bar_code_input: ГМ-20241007030415", "status": "passed", "start": 1728270255740, "stop": 1728270255830}, {"name": "Select 'Новое' from dropdown lke_cp_status_select", "status": "passed", "start": 1728270255830, "stop": 1728270256462}, {"name": "Select 'Свердловская обл, г Верхняя Пышма, Успенский пр-кт, д 103а' from dropdown departure_address_select", "status": "passed", "start": 1728270256462, "stop": 1728270256832}, {"name": "Select 'Свердловская обл, г Березовский, ул Театральная, д 13' from dropdown delivery_address_select", "status": "passed", "start": 1728270256832, "stop": 1728270257174}, {"name": "Click on create_cargo_place_button", "status": "passed", "steps": [{"name": "Assert \"Грузоместо успешно создано\" == \"Грузоместо успешно создано\"", "status": "passed", "start": 1728270258382, "stop": 1728270258382}], "start": 1728270257174, "stop": 1728270258382}, {"name": "Click on create_button", "status": "passed", "start": 1728270258382, "stop": 1728270259040}, {"name": "Click on reset_button", "status": "passed", "start": 1728270259040, "stop": 1728270261519}, {"name": "Input in barcode_filter: ГМ-20241007030415", "status": "passed", "start": 1728270261519, "stop": 1728270263581}, {"name": "Click on action_menu_button", "status": "passed", "start": 1728270263581, "stop": 1728270263644}, {"name": "Click on multi_select_button", "status": "passed", "start": 1728270263644, "stop": 1728270263740}, {"name": "Click on cp_list_checkbox index 3", "status": "passed", "start": 1728270263740, "stop": 1728270263819}, {"name": "Click on multi_transfer_button", "status": "passed", "start": 1728270263819, "stop": 1728270263919}, {"name": "Click on start_at_from_button", "status": "passed", "start": 1728270263919, "stop": 1728270267553}, {"name": "Click on today_button", "status": "passed", "start": 1728270267553, "stop": 1728270268136}, {"name": "Click on start_at_from_button", "status": "passed", "start": 1728270268136, "stop": 1728270268194}, {"name": "Backspace 5 times and input in start_at_from_input: 0835", "status": "passed", "start": 1728270268194, "stop": 1728270268788}, {"name": "Click on calendar_ok_button", "status": "passed", "start": 1728270268788, "stop": 1728270268840}, {"name": "Click on publish_later_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'publish_later_button' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 414, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 174, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'publish_later_button' is not clickable", "status": "passed", "start": 1728270330871, "stop": 1728270330871}], "start": 1728270270846, "stop": 1728270330871}, {"name": "Screen taken: tests_test_cargo_place_operations.py_test_cargo_place_transfer_lke[lke]_2024.10.07.03.05.30.png", "status": "passed", "start": 1728270331088, "stop": 1728270331088}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1728270248745, "stop": 1728270330873, "uuid": "9092fb30-74f8-4843-b291-5d6329e5f740", "historyId": "0e280cea7fd9d88cbab385374de7e5d8", "testCaseId": "81674f393ddbfb82698e96a00a2f99f8", "fullName": "tests.test_cargo_place_operations#test_cargo_place_transfer_lke", "labels": [{"name": "story", "value": "Smoke test"}, {"name": "feature", "value": "Передача грузомест экспедитору"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_cargo_place_operations"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "2928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cargo_place_operations"}]}