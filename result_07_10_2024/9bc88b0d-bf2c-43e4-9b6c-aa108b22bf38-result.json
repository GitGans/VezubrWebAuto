{"name": "test_delegation_producer_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'user_checkbox_empty' is not clickable", "trace": "self = <pages.contractor_page.Contractor object at 0x000001F2553B1650>, element_info = {'name': 'user_checkbox_empty', 'xpath': \"//span[@class='ant-checkbox']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n>               element = WebDriverWait(self.driver, 60).until(\n\nbase\\base_class.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6fe7609db24cf0c82a78968df62cab7f\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001F255835260>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63357B125+29573]\nE       \t(No symbol) [0x00007FF6334EFF50]\nE       \t(No symbol) [0x00007FF6333AB6EA]\nE       \t(No symbol) [0x00007FF6333FF815]\nE       \t(No symbol) [0x00007FF6333FFA6C]\nE       \t(No symbol) [0x00007FF63344B917]\nE       \t(No symbol) [0x00007FF63342733F]\nE       \t(No symbol) [0x00007FF6334486BC]\nE       \t(No symbol) [0x00007FF6334270A3]\nE       \t(No symbol) [0x00007FF6333F12DF]\nE       \t(No symbol) [0x00007FF6333F2441]\nE       \tGetHandleVerifier [0x00007FF6338AC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6338F7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6338ECF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF63363B2A6+816390]\nE       \t(No symbol) [0x00007FF6334FB25F]\nE       \t(No symbol) [0x00007FF6334F7084]\nE       \t(No symbol) [0x00007FF6334F7220]\nE       \t(No symbol) [0x00007FF6334E607F]\nE       \tBaseThreadInitThunk [0x00007FFEF1907374+20]\nE       \tRtlUserThreadStart [0x00007FFEF389CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001F255B53850>, <pages.sidebar.SideBar object at 0x000001F255B51E10>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Делегирование прав управления ЛК')\n    @allure.description('ЛКЭ. Тест делегирования пользователю права управления ЛК ГВ: '\n                        'делегируем - Второму, отменяем - Третьему')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_delegation_producer_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку перевозчиков\n        sidebar.move_and_click(move_to=sidebar.contractor_hover, click_to=sidebar.producers_list_button,\n                               do_assert=True, wait=\"lst\")\n    \n        producer_list = ProducersList(base.driver)\n        # Клик по перевозчику с ИНН \"producer_lkp_inn\"\n        producer_list.click_button(producer_list.producer_lkp_inn, wait=\"lst\")\n    \n        contractor = Contractor(base.driver)\n        # Переход на вкладку настроек\n        contractor.click_button(contractor.settings_tab)\n        # Делегирование пользователю (1-й в списке не выбранный) права управления ЛК\n>       contractor.click_button(contractor.user_checkbox_empty, 1)\n\ntests\\test_delegation_to_user_lke.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:414: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.contractor_page.Contractor object at 0x000001F2553B1650>, element_info = {'name': 'user_checkbox_empty', 'xpath': \"//span[@class='ant-checkbox']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.element_to_be_clickable((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'visible':\n                element = WebDriverWait(self.driver, 15).until(\n                    EC.visibility_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'located':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.presence_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'find':\n                element = self.driver.find_element(By.XPATH, element_info['xpath'])\n            elif wait_type == 'invisibility':\n                WebDriverWait(self.driver, 60).until(\n                    EC.invisibility_of_element_located((By.XPATH, element_info['xpath'])))\n                element = None\n            else:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = \"\"\n            if wait_type == 'clickable':\n                message = f\"Element '{element_info['name']}' is not clickable\"\n            elif wait_type == 'visible':\n                message = f\"Element '{element_info['name']}' is not visible\"\n                with allure.step(message):\n                    print(message)\n                # Возвращаем None, чтобы тест продолжился\n                return {'name': element_info['name'], 'element': None}\n            elif wait_type == 'located':\n                message = f\"Element '{element_info['name']}' is not located\"\n            elif wait_type == 'find':\n                message = f\"Element '{element_info['name']}' is not found\"\n            elif wait_type == 'invisibility':\n                message = f\"Element '{element_info['name']}' is not invisible\"\n    \n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'user_checkbox_empty' is not clickable\n\nbase\\base_class.py:174: TimeoutException"}, "description": "ЛКЭ. Тест делегирования пользователю права управления ЛК ГВ: делегируем - Второму, отменяем - Третьему", "steps": [{"name": "Move to contractor_hover", "status": "passed", "start": 1728270492380, "stop": 1728270492696}, {"name": "Click on producers_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1728270499792, "stop": 1728270499792}], "start": 1728270492797, "stop": 1728270499792}, {"name": "Click on producer_lkp_inn", "status": "passed", "start": 1728270499792, "stop": 1728270501477}, {"name": "Click on settings_tab", "status": "passed", "start": 1728270501477, "stop": 1728270501565}, {"name": "Click on user_checkbox_empty", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'user_checkbox_empty' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 414, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 174, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'user_checkbox_empty' is not clickable", "status": "passed", "start": 1728270562062, "stop": 1728270562062}], "start": 1728270501565, "stop": 1728270562062}, {"name": "Screen taken: tests_test_delegation_to_user_lke.py_test_delegation_producer_lke[lke]_2024.10.07.03.09.22.png", "status": "passed", "start": 1728270562276, "stop": 1728270562284}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1728270492380, "stop": 1728270562062, "uuid": "6cb98679-2659-44ab-9f7d-9c5d0c81f781", "historyId": "a508398694c1ea8914fdc5ca12f5565e", "testCaseId": "c9e9fa04450fe7f5151f6aa8a1c748da", "fullName": "tests.test_delegation_to_user_lke#test_delegation_producer_lke", "labels": [{"name": "feature", "value": "Делегирование прав управления ЛК"}, {"name": "story", "value": "Smoke test"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_delegation_to_user_lke"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "2928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_delegation_to_user_lke"}]}