{"name": "test_agreement_client_add_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'create_button' is not clickable", "trace": "self = <pages.agreement_add_page.AgreementAdd object at 0x000001FEAB1E8AD0>, element_info = {'name': 'create_button', 'xpath': \"//button[@class='ant-btn ant-btn-primary']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n>               element = WebDriverWait(self.driver, 60).until(\n\nbase\\base_class.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"680e435ae921b734aacafa5fa1a80692\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001FEAB1A6CA0>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6DDBCB125+29573]\nE       \t(No symbol) [0x00007FF6DDB3FF50]\nE       \t(No symbol) [0x00007FF6DD9FB6EA]\nE       \t(No symbol) [0x00007FF6DDA4F815]\nE       \t(No symbol) [0x00007FF6DDA4FA6C]\nE       \t(No symbol) [0x00007FF6DDA9B917]\nE       \t(No symbol) [0x00007FF6DDA7733F]\nE       \t(No symbol) [0x00007FF6DDA986BC]\nE       \t(No symbol) [0x00007FF6DDA770A3]\nE       \t(No symbol) [0x00007FF6DDA412DF]\nE       \t(No symbol) [0x00007FF6DDA42441]\nE       \tGetHandleVerifier [0x00007FF6DDEFC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6DDF47B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6DDF3CF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF6DDC8B2A6+816390]\nE       \t(No symbol) [0x00007FF6DDB4B25F]\nE       \t(No symbol) [0x00007FF6DDB47084]\nE       \t(No symbol) [0x00007FF6DDB47220]\nE       \t(No symbol) [0x00007FF6DDB3607F]\nE       \tBaseThreadInitThunk [0x00007FFFFB4F7374+20]\nE       \tRtlUserThreadStart [0x00007FFFFBE3CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001FEAA40AB90>, <pages.sidebar.SideBar object at 0x000001FEAB1DFAD0>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Создание договоров')\n    @allure.description('ЛКЭ. Тест создания договора с ГВ: '\n                        'номер - №-timestamp, срок - с Сегодня по 45 год, автоформирование реестров - Отключено.')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_agreement_client_add_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку клиентов\n        sidebar.move_and_click(move_to=sidebar.contractor_hover, click_to=sidebar.clients_list_button,\n                               do_assert=True, wait=\"lst\")\n    \n        client_list = ClientsList(base.driver)\n        # Клик по клиенту с ИНН \"client_lkz_inn\"\n        client_list.click_button(client_list.client_lkz_inn, wait=\"form\")\n    \n        contractor = Contractor(base.driver)\n        # Клик по кнопке добавления договора\n        contractor.click_button(contractor.add_agreements_button)\n    \n        add_agr = AgreementAdd(base.driver)\n        # Ввод номера договора\n        add_agr.input_in_field(add_agr.agr_number_input, f\"№-{base.get_timestamp()}\")\n        # Установка даты начала договора на сегодня\n        add_agr.click_button(add_agr.agr_add_date_button)\n        add_agr.click_button(add_agr.today_button)\n        # Установка даты окончания договора на 01.01.2045\n        add_agr.click_button(add_agr.agr_end_date_button)\n        time.sleep(0.5)\n        add_agr.input_in_field(add_agr.agr_date_input, \"01012045\")\n        # Отключение автоматического формирования реестров\n        add_agr.dropdown_click_input_click(add_agr.registers_auto_select, \"Автоматическое формирование Реестров отключено\")\n        # Клик по кнопке добавления договора\n        # add_agr.click_button(add_agr.add_agr_button, do_assert=True)\n        # Клик по кнопке подтверждения добавления договора\n>       add_agr.click_button(add_agr.confirm_add_button)\n\ntests\\test_agreement_add_lke.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:411: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.agreement_add_page.AgreementAdd object at 0x000001FEAB1E8AD0>, element_info = {'name': 'create_button', 'xpath': \"//button[@class='ant-btn ant-btn-primary']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.element_to_be_clickable((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'visible':\n                element = WebDriverWait(self.driver, 15).until(\n                    EC.visibility_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'located':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.presence_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'find':\n                element = self.driver.find_element(By.XPATH, element_info['xpath'])\n            elif wait_type == 'invisibility':\n                WebDriverWait(self.driver, 60).until(\n                    EC.invisibility_of_element_located((By.XPATH, element_info['xpath'])))\n                element = None\n            else:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = \"\"\n            if wait_type == 'clickable':\n                message = f\"Element '{element_info['name']}' is not clickable\"\n            elif wait_type == 'visible':\n                message = f\"Element '{element_info['name']}' is not visible\"\n                with allure.step(message):\n                    print(message)\n                # Возвращаем None, чтобы тест продолжился\n                return {'name': element_info['name'], 'element': None}\n            elif wait_type == 'located':\n                message = f\"Element '{element_info['name']}' is not located\"\n            elif wait_type == 'find':\n                message = f\"Element '{element_info['name']}' is not found\"\n            elif wait_type == 'invisibility':\n                message = f\"Element '{element_info['name']}' is not invisible\"\n    \n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'create_button' is not clickable\n\nbase\\base_class.py:174: TimeoutException"}, "description": "ЛКЭ. Тест создания договора с ГВ: номер - №-timestamp, срок - с Сегодня по 45 год, автоформирование реестров - Отключено.", "steps": [{"name": "Move to contractor_hover", "status": "passed", "start": 1727348484735, "stop": 1727348485552}, {"name": "Click on clients_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1727348486968, "stop": 1727348486968}], "start": 1727348485653, "stop": 1727348486968}, {"name": "Click on client_lkz_inn", "status": "passed", "start": 1727348486968, "stop": 1727348488655}, {"name": "Click on add_agreements_button", "status": "passed", "start": 1727348488655, "stop": 1727348488722}, {"name": "Input in agr_number_input: №-20240926110128", "status": "passed", "start": 1727348488723, "stop": 1727348489418}, {"name": "Click on agr_add_date_button", "status": "passed", "start": 1727348489418, "stop": 1727348489496}, {"name": "Click on today_button", "status": "passed", "start": 1727348489496, "stop": 1727348490079}, {"name": "Click on agr_end_date_button", "status": "passed", "start": 1727348490079, "stop": 1727348490154}, {"name": "Input in agr_date_input: 01012045", "status": "passed", "start": 1727348490654, "stop": 1727348490719}, {"name": "Select 'Автоматическое формирование Реестров отключено' from dropdown registers_auto_select", "status": "passed", "start": 1727348490720, "stop": 1727348491364}, {"name": "Click on create_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'create_button' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 411, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 174, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'create_button' is not clickable", "status": "passed", "start": 1727348551878, "stop": 1727348551878}], "start": 1727348491364, "stop": 1727348551878}, {"name": "Screen taken: 2024.09.26.11.02.32.png", "status": "passed", "start": 1727348552283, "stop": 1727348552283}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1727348484735, "stop": 1727348551879, "uuid": "c5ba90c3-b03a-4541-a9d6-ddf119bbe209", "historyId": "675106afbfca710bb1d83a5e2c152dcf", "testCaseId": "669698e84c5346b147f1f5a5a6927a90", "fullName": "tests.test_agreement_add_lke#test_agreement_client_add_lke", "labels": [{"name": "feature", "value": "Создание договоров"}, {"name": "story", "value": "Smoke test"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_agreement_add_lke"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "18696-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_agreement_add_lke"}]}