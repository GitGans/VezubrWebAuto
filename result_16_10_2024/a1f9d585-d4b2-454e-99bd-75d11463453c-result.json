{"name": "test_agreement_client_add_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'create_button' is not clickable", "trace": "self = <pages.agreement_add_page.AgreementAdd object at 0x0000020ACF3A2550>, element_info = {'name': 'create_button', 'xpath': \"//button[@class='ant-btn ant-btn-primary']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition((By.XPATH, element_info['xpath'])))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n\nbase\\base_class.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"60765681e993890f2b00f5a73bb8eb21\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000020ACF3A4400>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF634F3B125+29573]\nE       \t(No symbol) [0x00007FF634EAFF50]\nE       \t(No symbol) [0x00007FF634D6B6EA]\nE       \t(No symbol) [0x00007FF634DBF815]\nE       \t(No symbol) [0x00007FF634DBFA6C]\nE       \t(No symbol) [0x00007FF634E0B917]\nE       \t(No symbol) [0x00007FF634DE733F]\nE       \t(No symbol) [0x00007FF634E086BC]\nE       \t(No symbol) [0x00007FF634DE70A3]\nE       \t(No symbol) [0x00007FF634DB12DF]\nE       \t(No symbol) [0x00007FF634DB2441]\nE       \tGetHandleVerifier [0x00007FF63526C76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6352B7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6352ACF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF634FFB2A6+816390]\nE       \t(No symbol) [0x00007FF634EBB25F]\nE       \t(No symbol) [0x00007FF634EB7084]\nE       \t(No symbol) [0x00007FF634EB7220]\nE       \t(No symbol) [0x00007FF634EA607F]\nE       \tBaseThreadInitThunk [0x00007FFE26487374+20]\nE       \tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x0000020ACF1C4610>, <pages.sidebar.SideBar object at 0x0000020ACF393590>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Создание договоров')\n    @allure.description('ЛКЭ. Тест создания договора с ГВ: '\n                        'номер - №-timestamp, срок - с Сегодня по 45 год, автоформирование реестров - Отключено.')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_agreement_client_add_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку клиентов\n        sidebar.move_and_click(move_to=sidebar.contractor_hover, click_to=sidebar.clients_list_button,\n                               do_assert=True, wait=\"lst\")\n    \n        client_list = ClientsList(base.driver)\n        # Клик по клиенту с ИНН \"client_lkz_inn\"\n        client_list.click_button(client_list.client_lkz_inn, wait=\"form\")\n    \n        contractor = Contractor(base.driver)\n        # Клик по кнопке добавления договора\n        contractor.click_button(contractor.add_agreements_button)\n    \n        add_agr = AgreementAdd(base.driver)\n        # Ввод номера договора\n        add_agr.input_in_field(add_agr.agr_number_input, f\"№-{base.get_timestamp()}\")\n        # Установка даты начала договора на сегодня\n        add_agr.click_button(add_agr.agr_add_date_button)\n        add_agr.click_button(add_agr.today_button)\n        # Установка даты окончания договора на 01.01.2045\n        add_agr.click_button(add_agr.agr_end_date_button)\n        time.sleep(0.5)\n        add_agr.input_in_field(add_agr.agr_date_input, \"01012045\")\n        # Отключение автоматического формирования реестров\n        add_agr.dropdown_click_input_click(add_agr.registers_auto_select, \"Автоматическое формирование Реестров отключено\")\n        # Клик по кнопке добавления договора\n        # add_agr.click_button(add_agr.add_agr_button, do_assert=True)\n        # Клик по кнопке подтверждения добавления договора\n>       add_agr.click_button(add_agr.confirm_add_button)\n\ntests\\test_agreement_add_lke.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:320: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.agreement_add_page.AgreementAdd object at 0x0000020ACF3A2550>, element_info = {'name': 'create_button', 'xpath': \"//button[@class='ant-btn ant-btn-primary']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition((By.XPATH, element_info['xpath'])))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'create_button' is not clickable\n\nbase\\base_class.py:164: TimeoutException"}, "description": "ЛКЭ. Тест создания договора с ГВ: номер - №-timestamp, срок - с Сегодня по 45 год, автоформирование реестров - Отключено.", "steps": [{"name": "Move to contractor_hover", "status": "passed", "start": 1729060202962, "stop": 1729060203810}, {"name": "Click on clients_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1729060205696, "stop": 1729060205696}], "start": 1729060203910, "stop": 1729060205697}, {"name": "Click on client_lkz_inn", "status": "passed", "start": 1729060205697, "stop": 1729060206905}, {"name": "Click on add_agreements_button", "status": "passed", "start": 1729060206905, "stop": 1729060207015}, {"name": "Input in agr_number_input: №-20241016063007", "status": "passed", "start": 1729060207015, "stop": 1729060209725}, {"name": "Click on agr_add_date_button", "status": "passed", "start": 1729060209725, "stop": 1729060209818}, {"name": "Click on today_button", "status": "passed", "start": 1729060209818, "stop": 1729060210423}, {"name": "Click on agr_end_date_button", "status": "passed", "start": 1729060210423, "stop": 1729060210509}, {"name": "Input in agr_date_input: 01012045", "status": "passed", "start": 1729060211009, "stop": 1729060211086}, {"name": "Select 'Автоматическое формирование Реестров отключено' from dropdown registers_auto_select", "status": "passed", "start": 1729060211086, "stop": 1729060211758}, {"name": "Click on create_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'create_button' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 320, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 164, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'create_button' is not clickable", "status": "passed", "start": 1729060271988, "stop": 1729060271988}], "start": 1729060211758, "stop": 1729060271988}, {"name": "Screen taken: tests_test_agreement_add_lke.py_test_agreement_client_add_lke[lke]_2024.10.16.06.31.12.png", "status": "passed", "attachments": [{"name": "Screenshot", "source": "14cc3d66-cff1-4eec-81a2-999cbe3d47de-attachment.png", "type": "image/png"}], "start": 1729060272698, "stop": 1729060272703}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1729060202961, "stop": 1729060272065, "uuid": "e651b29e-ec71-4e5e-9ea0-a835f9c68789", "historyId": "675106afbfca710bb1d83a5e2c152dcf", "testCaseId": "669698e84c5346b147f1f5a5a6927a90", "fullName": "tests.test_agreement_add_lke#test_agreement_client_add_lke", "labels": [{"name": "story", "value": "Smoke test"}, {"name": "feature", "value": "Создание договоров"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_agreement_add_lke"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "25100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_agreement_add_lke"}]}