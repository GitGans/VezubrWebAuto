{"name": "test_registration_new_lkz", "status": "broken", "statusDetails": {"message": "ValueError: Код подтверждения для номера +79806192411 не найден.", "trace": "self = <pages.sms_center_page.SmsCenter object at 0x00000275E4495410>, phone_number = '9806192411'\n\n    def get_confirmation_code(self, phone_number):\n        \"\"\"\n        Извлекает код подтверждения, связанный с заданным номером телефона.\n    \n        Parameters\n        ----------\n        phone_number : str\n            Номер телефона в формате 10 цифр без префикса.\n    \n        Returns\n        -------\n        str\n            Код подтверждения как строку, если найден.\n    \n        Raises\n        ------\n        ValueError\n            Если код подтверждения не найден.\n        \"\"\"\n        formatted_phone = '+7' + phone_number\n        xpath_locator = f\"//tr[contains(.//div, '{formatted_phone}')]//div[contains(text(), 'Код подтверждения:')]\"\n        try:\n>           element_text = WebDriverWait(self.driver, 60).until(\n                EC.visibility_of_element_located((By.XPATH, xpath_locator))\n            ).text\n\nbase\\base_class.py:825: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"44f18905907c597d8fe3cd6ae5d413e5\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x00000275E43D3380>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF642B29632+30946]\nE       \t(No symbol) [0x00007FF642ADE3C9]\nE       \t(No symbol) [0x00007FF6429D6FDA]\nE       \t(No symbol) [0x00007FF642A2822C]\nE       \t(No symbol) [0x00007FF642A2850C]\nE       \t(No symbol) [0x00007FF642A6DCB7]\nE       \t(No symbol) [0x00007FF642A4CAAF]\nE       \t(No symbol) [0x00007FF642A6B041]\nE       \t(No symbol) [0x00007FF642A4C813]\nE       \t(No symbol) [0x00007FF642A1A6E5]\nE       \t(No symbol) [0x00007FF642A1B021]\nE       \tGetHandleVerifier [0x00007FF642C5F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF642C6BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF642C62A03+1313971]\nE       \tGetHandleVerifier [0x00007FF642B5DD06+245686]\nE       \t(No symbol) [0x00007FF642AE758F]\nE       \t(No symbol) [0x00007FF642AE3804]\nE       \t(No symbol) [0x00007FF642AE3992]\nE       \t(No symbol) [0x00007FF642ADA3EF]\nE       \tBaseThreadInitThunk [0x00007FFF1A2A7374+20]\nE       \tRtlUserThreadStart [0x00007FFF1A6FCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndomain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Регистрация личного кабинета')\n    @allure.description('Тест регистрации личного кабинета Грузовладельца: регистрация - По ссылке Экс, тлф. - '\n                        '98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, '\n                        'пользователь - Регресс ГВ, после создания заходим в ЛК и проверяем ИНН, '\n                        'далее заходим в ЛК Экс и принимаем ГВ в контур Экс.,')\n    def test_registration_new_lkz(domain):\n        # Инициализация базовых объектов и переход к странице входа по ссылке\n        base, login = base_test_with_login_via_link(domain=domain)\n    \n        reg = Registration(base.driver)\n        # Переход к регистрации нового аккаунта\n        reg.click_button(reg.registration_new_account)\n        # Выбор типа регистрации - Грузовладелец\n        reg.click_button(reg.client_button)\n        phone = \"98\" + reg.get_timestamp_eight_signs()\n        # Ввод номера телефона\n        reg.input_in_field(reg.phone_input, phone, click_first=True)\n        # Принятие политики конфиденциальности\n        reg.click_button(reg.privacy_policy_checkbox)\n        # Запрос кода подтверждения\n        reg.click_button(reg.get_code_button)\n    \n        sms = SmsCenter(base.driver)\n        # Открытие нового окна для получения кода подтверждения\n        sms.driver.execute_script(\"window.open(arguments[0]);\", sms.sms_url)\n        WebDriverWait(base.driver, 60).until(lambda d: len(d.window_handles) > 1)\n        windows = base.driver.window_handles\n        base.driver.switch_to.window(windows[1])\n    \n        # Ввод логина и пароля для доступа к СМС центру\n        sms.input_in_field(sms.sms_login_input, sms_center[\"login\"], safe=True)\n        sms.input_in_field(sms.sms_password_input, sms_center[\"password\"], safe=True)\n        # Переход к деталям сообщений\n        sms.click_button(sms.sms_login_button)\n        sms.click_button(sms.detailing_button)\n        # Получение кода подтверждения\n>       code = sms.get_confirmation_code(phone)\n\ntests\\test_registration.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.sms_center_page.SmsCenter object at 0x00000275E4495410>, phone_number = '9806192411'\n\n    def get_confirmation_code(self, phone_number):\n        \"\"\"\n        Извлекает код подтверждения, связанный с заданным номером телефона.\n    \n        Parameters\n        ----------\n        phone_number : str\n            Номер телефона в формате 10 цифр без префикса.\n    \n        Returns\n        -------\n        str\n            Код подтверждения как строку, если найден.\n    \n        Raises\n        ------\n        ValueError\n            Если код подтверждения не найден.\n        \"\"\"\n        formatted_phone = '+7' + phone_number\n        xpath_locator = f\"//tr[contains(.//div, '{formatted_phone}')]//div[contains(text(), 'Код подтверждения:')]\"\n        try:\n            element_text = WebDriverWait(self.driver, 60).until(\n                EC.visibility_of_element_located((By.XPATH, xpath_locator))\n            ).text\n        except TimeoutException:\n>           raise ValueError(f\"Код подтверждения для номера {formatted_phone} не найден.\")\nE           ValueError: Код подтверждения для номера +79806192411 не найден.\n\nbase\\base_class.py:829: ValueError"}, "description": "Тест регистрации личного кабинета Грузовладельца: регистрация - По ссылке Экс, тлф. - 98+get_timestamp_eight_signs, инн - Рандом, лицо - Юридическое, почта - Etimestamp@mail.ru, пользователь - Регресс ГВ, после создания заходим в ЛК и проверяем ИНН, далее заходим в ЛК Экс и принимаем ГВ в контур Экс.,", "steps": [{"name": "Start test", "status": "passed", "start": 1722972225201, "stop": 1722972225201}, {"name": "Current url: https://enter.vezubr.com/contour-join?contourCode=DgzHgntfhz", "status": "passed", "start": 1722972251155, "stop": 1722972251155}, {"name": "Click on registration_new_account", "status": "passed", "start": 1722972251190, "stop": 1722972251286}, {"name": "Click on client_button", "status": "passed", "start": 1722972251286, "stop": 1722972251356}, {"name": "Click and Input in phone_input: 9806192411", "status": "passed", "start": 1722972251356, "stop": 1722972251489}, {"name": "Click on privacy_policy_checkbox", "status": "passed", "start": 1722972251489, "stop": 1722972251547}, {"name": "Click on get_code_button", "status": "passed", "start": 1722972251547, "stop": 1722972251605}, {"name": "Input in sms_login_input: ***", "status": "passed", "start": 1722972251672, "stop": 1722972260065}, {"name": "Input in sms_password_input: ***", "status": "passed", "start": 1722972260065, "stop": 1722972260150}, {"name": "Click on sms_login_button", "status": "passed", "start": 1722972260150, "stop": 1722972260224}, {"name": "Click on detailing_button", "status": "passed", "start": 1722972260224, "stop": 1722972262366}], "start": 1722972223552, "stop": 1722972322611, "uuid": "445ba1b3-e1a5-4514-8fa9-1ecda807bb9f", "historyId": "57a71a9cf4d8db5039b37c733969c274", "testCaseId": "57a71a9cf4d8db5039b37c733969c274", "fullName": "tests.test_registration#test_registration_new_lkz", "labels": [{"name": "story", "value": "Smoke test"}, {"name": "feature", "value": "Регистрация личного кабинета"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "18692-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}