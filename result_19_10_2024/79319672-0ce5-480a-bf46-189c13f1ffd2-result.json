{"name": "test_address_add_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B695B125+29573]\n\t(No symbol) [0x00007FF6B68CFF50]\n\t(No symbol) [0x00007FF6B678B6EA]\n\t(No symbol) [0x00007FF6B675FCD5]\n\t(No symbol) [0x00007FF6B680EF67]\n\t(No symbol) [0x00007FF6B6827FC1]\n\t(No symbol) [0x00007FF6B68070A3]\n\t(No symbol) [0x00007FF6B67D12DF]\n\t(No symbol) [0x00007FF6B67D2441]\n\tGetHandleVerifier [0x00007FF6B6C8C76D+3377613]\n\tGetHandleVerifier [0x00007FF6B6CD7B67+3685831]\n\tGetHandleVerifier [0x00007FF6B6CCCF8B+3641835]\n\tGetHandleVerifier [0x00007FF6B6A1B2A6+816390]\n\t(No symbol) [0x00007FF6B68DB25F]\n\t(No symbol) [0x00007FF6B68D7084]\n\t(No symbol) [0x00007FF6B68D7220]\n\t(No symbol) [0x00007FF6B68C607F]\n\tBaseThreadInitThunk [0x00007FFE26487374+20]\n\tRtlUserThreadStart [0x00007FFE27CBCC91+33]", "trace": "base_fixture = (<base.base_class.Base object at 0x00000283473E1590>, <pages.sidebar.SideBar object at 0x0000028349D15290>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Создание и удаления адресов')\n    @allure.description('ЛКЭ. Тест создания адреса: статус - Активный, заполняем поля - Все, в конце - Удаляем')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_address_add_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку адресов\n        sidebar.move_and_click(move_to=sidebar.directories_hover, click_to=sidebar.addresses_list_button,\n                               do_assert=True, wait=\"lst\")\n    \n        address_list = AddressesList(base.driver)\n        # Клик по кнопке добавления адреса\n        address_list.click_button(address_list.add_address_button)\n    \n        add_address = AddressAdd(base.driver)\n        # Генерация уникального идентификатора для адреса\n        address_stamp = f\"Адрес-{add_address.get_timestamp()}\"\n        # Ввод названия адреса\n        add_address.input_in_field(add_address.name_address_input, address_stamp)\n        # Выбор типа адреса\n        add_address.dropdown_without_input(add_address.address_type_select, \"Склад\")\n        # Настройка статусов адреса в МП\n        add_address.dropdown_without_input(add_address.address_status_in_app, \"Полный список\")\n        # Установка статуса адреса в \"Активный\"\n        add_address.click_button(add_address.address_status_toggl)\n        # Ввод фактического адреса и выбор из выпадающего списка\n        add_address.dropdown_with_input(\n            add_address.address_input,\n            f\"г Екатеринбург, пр-кт Ленина, д {base.random_value_float_str(1, 150)}\",\n            wait_presence=True\n        )\n        # Ввод ИНН владельца адреса и выбор из выпадающего списка\n        add_address.dropdown_with_input(add_address.owner_inn_input, \"77\", wait_presence=True)\n        # Ввод id адреса партнера\n        add_address.input_in_field(add_address.external_id_input, address_stamp)\n        # Ввод требований к ТС на адресе\n        add_address.input_in_field(add_address.max_height_input, base.random_value_float_str(2.0, 5.0, precision=1))\n        add_address.input_in_field(add_address.max_capacity_input, base.random_value_float_str(1000, 5000))\n        add_address.dropdown_without_input(add_address.loading_type_select, \"Верхняя\")\n        add_address.click_button(add_address.entry_pass_toggl)\n        add_address.input_in_field(add_address.time_departure_input, base.random_value_float_str(10, 60))\n        add_address.input_in_field(add_address.time_arrival_input, base.random_value_float_str(10, 60))\n        # Ввод комментария к адресу\n        add_address.input_in_field(add_address.comment_input, \"Адрес создан автотестом\")\n        # Ввод контактной информации владельца адреса\n        add_address.input_in_field(add_address.contact_person_input, \"Какой-то Василий\")\n        add_address.input_in_field(add_address.mobile_phone_input, base.random_value_float_str(1000000000, 9999999999),\n                                   click_first=True)\n        add_address.input_in_field(add_address.additional_first_input, base.random_value_float_str(1, 999999),\n                                   click_first=True)\n        add_address.input_in_field(add_address.email_input, f\"E{base.get_timestamp()}@mail.ru\")\n        add_address.input_in_field(add_address.work_phone_input, base.random_value_float_str(1000000000, 9999999999),\n                                   click_first=True)\n        add_address.input_in_field(add_address.additional_second_input, base.random_value_float_str(1, 999999),\n                                   click_first=True)\n        # Клик по кнопке создания адреса\n>       add_address.click_button(add_address.create_address_button, do_assert=True)\n\ntests\\test_address_add.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:341: in click_button\n    self.assert_element_text(element_dict)\nbase\\base_class.py:225: in assert_element_text\n    element = self.get_element(element_info, wait_type=wait_type)['element']\nbase\\base_class.py:155: in get_element\n    element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028349B545D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6B68C607F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE26487374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE27CBCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B695B125+29573]\nE       \t(No symbol) [0x00007FF6B68CFF50]\nE       \t(No symbol) [0x00007FF6B678B6EA]\nE       \t(No symbol) [0x00007FF6B675FCD5]\nE       \t(No symbol) [0x00007FF6B680EF67]\nE       \t(No symbol) [0x00007FF6B6827FC1]\nE       \t(No symbol) [0x00007FF6B68070A3]\nE       \t(No symbol) [0x00007FF6B67D12DF]\nE       \t(No symbol) [0x00007FF6B67D2441]\nE       \tGetHandleVerifier [0x00007FF6B6C8C76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6B6CD7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6B6CCCF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF6B6A1B2A6+816390]\nE       \t(No symbol) [0x00007FF6B68DB25F]\nE       \t(No symbol) [0x00007FF6B68D7084]\nE       \t(No symbol) [0x00007FF6B68D7220]\nE       \t(No symbol) [0x00007FF6B68C607F]\nE       \tBaseThreadInitThunk [0x00007FFE26487374+20]\nE       \tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "ЛКЭ. Тест создания адреса: статус - Активный, заполняем поля - Все, в конце - Удаляем", "steps": [{"name": "Move to directories_hover", "status": "passed", "start": 1729334966955, "stop": 1729334967784}, {"name": "Click on addresses_list_button", "status": "passed", "steps": [{"name": "Assert \"Адреса\" == \"Адреса\"", "status": "passed", "start": 1729334969139, "stop": 1729334969139}], "start": 1729334967885, "stop": 1729334969139}, {"name": "Click on add_address_button", "status": "passed", "start": 1729334969139, "stop": 1729334969242}, {"name": "Input in name_address_input: Адрес-20241019104929", "status": "passed", "start": 1729334969242, "stop": 1729334969319}, {"name": "Select 'Склад' from dropdown address_type_select", "status": "passed", "start": 1729334969319, "stop": 1729334970007}, {"name": "Select 'Полный список' from dropdown address_status_in_app", "status": "passed", "start": 1729334970007, "stop": 1729334970634}, {"name": "Click on address_status_toggl", "status": "passed", "start": 1729334970634, "stop": 1729334970690}, {"name": "Select 'г Екатеринбург, пр-кт Ленина, д 77' from dropdown address_input", "status": "passed", "start": 1729334970690, "stop": 1729334973449}, {"name": "Select '77' from dropdown owner_inn_input", "status": "passed", "start": 1729334973449, "stop": 1729334973603}, {"name": "Input in external_id_input: Адрес-20241019104929", "status": "passed", "start": 1729334973603, "stop": 1729334973717}, {"name": "Input in max_height_input: 2.2", "status": "passed", "start": 1729334973717, "stop": 1729334973807}, {"name": "Input in max_capacity_input: 4903", "status": "passed", "start": 1729334973807, "stop": 1729334973874}, {"name": "Select 'Верхняя' from dropdown loading_type_select", "status": "passed", "start": 1729334973874, "stop": 1729334974511}, {"name": "Click on entry_pass_toggl", "status": "passed", "start": 1729334974511, "stop": 1729334974571}, {"name": "Input in time_departure_input: 22", "status": "passed", "start": 1729334974571, "stop": 1729334974657}, {"name": "Input in time_arrival_input: 34", "status": "passed", "start": 1729334974657, "stop": 1729334974740}, {"name": "Input in comment_input: Адрес создан автотестом", "status": "passed", "start": 1729334974740, "stop": 1729334974856}, {"name": "Input in contact_person_input: Какой-то Василий", "status": "passed", "start": 1729334974856, "stop": 1729334974942}, {"name": "Click and Input in mobile_phone_input: 4125554649", "status": "passed", "start": 1729334974942, "stop": 1729334975049}, {"name": "Click and Input in additional_first_input: 419483", "status": "passed", "start": 1729334975049, "stop": 1729334975132}, {"name": "Input in email_input: E20241019104935@mail.ru", "status": "passed", "start": 1729334975132, "stop": 1729334975231}, {"name": "Click and Input in work_phone_input: 5030216020", "status": "passed", "start": 1729334975231, "stop": 1729334975348}, {"name": "Click and Input in additional_second_input: 39427", "status": "passed", "start": 1729334975348, "stop": 1729334975432}, {"name": "Click on create_address_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B695B125+29573]\n\t(No symbol) [0x00007FF6B68CFF50]\n\t(No symbol) [0x00007FF6B678B6EA]\n\t(No symbol) [0x00007FF6B675FCD5]\n\t(No symbol) [0x00007FF6B680EF67]\n\t(No symbol) [0x00007FF6B6827FC1]\n\t(No symbol) [0x00007FF6B68070A3]\n\t(No symbol) [0x00007FF6B67D12DF]\n\t(No symbol) [0x00007FF6B67D2441]\n\tGetHandleVerifier [0x00007FF6B6C8C76D+3377613]\n\tGetHandleVerifier [0x00007FF6B6CD7B67+3685831]\n\tGetHandleVerifier [0x00007FF6B6CCCF8B+3641835]\n\tGetHandleVerifier [0x00007FF6B6A1B2A6+816390]\n\t(No symbol) [0x00007FF6B68DB25F]\n\t(No symbol) [0x00007FF6B68D7084]\n\t(No symbol) [0x00007FF6B68D7220]\n\t(No symbol) [0x00007FF6B68C607F]\n\tBaseThreadInitThunk [0x00007FFE26487374+20]\n\tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 341, in click_button\n    self.assert_element_text(element_dict)\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 225, in assert_element_text\n    element = self.get_element(element_info, wait_type=wait_type)['element']\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 155, in get_element\n    element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 92, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 355, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1729334975432, "stop": 1729334993251}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1729334966955, "stop": 1729334993251, "uuid": "29e09a0d-0895-4f77-99a7-93beff8b8804", "testCaseId": "3e9824b4f6963241900b95786ac84043", "fullName": "tests.test_address_add#test_address_add_lke"}