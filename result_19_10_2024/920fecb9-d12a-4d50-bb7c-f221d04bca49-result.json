{"name": "test_tariff_attach_client_lkp[lkp]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'Reference element' is not clickable", "trace": "self = <pages.extra_agreement_add_page.ExtraAgreementAdd object at 0x000002357FCE8510>\nelement_info = {'name': 'Reference element', 'xpath': \"//div[@class='ant-modal-confirm-content' and text()='ДУ к договору было успешно создано']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition((By.XPATH, element_info['xpath'])))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n\nbase\\base_class.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9ed1352724784c20f8dbd7a9c817a08e\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000023500BB3920>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B695B125+29573]\nE       \t(No symbol) [0x00007FF6B68CFF50]\nE       \t(No symbol) [0x00007FF6B678B6EA]\nE       \t(No symbol) [0x00007FF6B67DF815]\nE       \t(No symbol) [0x00007FF6B67DFA6C]\nE       \t(No symbol) [0x00007FF6B682B917]\nE       \t(No symbol) [0x00007FF6B680733F]\nE       \t(No symbol) [0x00007FF6B68286BC]\nE       \t(No symbol) [0x00007FF6B68070A3]\nE       \t(No symbol) [0x00007FF6B67D12DF]\nE       \t(No symbol) [0x00007FF6B67D2441]\nE       \tGetHandleVerifier [0x00007FF6B6C8C76D+3377613]\nE       \tGetHandleVerifier [0x00007FF6B6CD7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF6B6CCCF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF6B6A1B2A6+816390]\nE       \t(No symbol) [0x00007FF6B68DB25F]\nE       \t(No symbol) [0x00007FF6B68D7084]\nE       \t(No symbol) [0x00007FF6B68D7220]\nE       \t(No symbol) [0x00007FF6B68C607F]\nE       \tBaseThreadInitThunk [0x00007FFE26487374+20]\nE       \tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x0000023500B92490>, <pages.sidebar.SideBar object at 0x0000023500C92B10>), domain = 'com'\n\n    @allure.feature('Прикрепление тарифов')\n    @allure.story(\"Critical path test\")\n    @allure.description('ЛКП. Тест прикрепления тарифа к ДУ c ГВ: создаем базовый ДУ и сразу прикрепляем существующий '\n                        'тариф - Первый в списке')\n    @pytest.mark.parametrize('base_fixture', ['lkp'], indirect=True)  # Параметризация роли\n    def test_tariff_attach_client_lkp(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку клиентов\n        sidebar.click_button(sidebar.clients_list_button, do_assert=True, wait=\"lst\")\n    \n        client_list = ClientsList(base.driver)\n        # Выбор клиента по ИНН\n        client_list.click_button(client_list.client_lkz_inn, wait=\"lst\")\n    \n        contractor = Contractor(base.driver)\n        # Переход к договорам\n        contractor.click_button(contractor.agreements_link, wait=\"form\")\n    \n        agreement = Agreement(base.driver)\n        # Переход на вкладку дополнительных соглашений\n        agreement.click_button(agreement.extra_agreement_tab)\n        # Клик по кнопке добавления дополнительного соглашения\n        agreement.click_button(agreement.add_extra_agr_button)\n    \n        add_extra = ExtraAgreementAdd(base.driver)\n        # Создание базового дополнительного соглашения\n        add_extra.add_base_extra_agreements()\n        # Выбор тарифа\n        add_extra.click_button(add_extra.radio_button, wait_type=\"located\")\n        # Подтверждение выбора тарифа\n>       add_extra.click_button(add_extra.confirm_tariff_button, do_assert=True)\n\ntests\\test_tariff_attach_lkp.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:341: in click_button\n    self.assert_element_text(element_dict)\nbase\\base_class.py:225: in assert_element_text\n    element = self.get_element(element_info, wait_type=wait_type)['element']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.extra_agreement_add_page.ExtraAgreementAdd object at 0x000002357FCE8510>\nelement_info = {'name': 'Reference element', 'xpath': \"//div[@class='ant-modal-confirm-content' and text()='ДУ к договору было успешно создано']\"}, wait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition((By.XPATH, element_info['xpath'])))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'Reference element' is not clickable\n\nbase\\base_class.py:164: TimeoutException"}, "description": "ЛКП. Тест прикрепления тарифа к ДУ c ГВ: создаем базовый ДУ и сразу прикрепляем существующий тариф - Первый в списке", "steps": [{"name": "Click on clients_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1729340801206, "stop": 1729340801206}], "start": 1729340800486, "stop": 1729340801206}, {"name": "Click on client_lkz_inn", "status": "passed", "start": 1729340801206, "stop": 1729340802351}, {"name": "Click on agreements_link", "status": "passed", "start": 1729340802351, "stop": 1729340802960}, {"name": "Click on extra_agreement_tab", "status": "passed", "start": 1729340802960, "stop": 1729340803045}, {"name": "Click on add_extra_agr_button", "status": "passed", "start": 1729340803045, "stop": 1729340803111}, {"name": "Input in extra_agr_number_input: №-20241019122643", "status": "passed", "start": 1729340803111, "stop": 1729340803741}, {"name": "Click on extra_agr_add_date_button", "status": "passed", "start": 1729340803741, "stop": 1729340803824}, {"name": "Click on today_button", "status": "passed", "start": 1729340803824, "stop": 1729340804412}, {"name": "Click on extra_agr_end_date_button", "status": "passed", "start": 1729340804412, "stop": 1729340804486}, {"name": "Input in extra_agr_date_input: 01012040", "status": "passed", "start": 1729340804986, "stop": 1729340805077}, {"name": "Click and Input in extra_agr_comment_input: ДУ создано автотестом", "status": "passed", "start": 1729340805077, "stop": 1729340805215}, {"name": "Click on add_extra_agr_button", "status": "passed", "start": 1729340805215, "stop": 1729340805275}, {"name": "Click on radio_button", "status": "passed", "start": 1729340805275, "stop": 1729340806173}, {"name": "Click on create_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'Reference element' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 341, in click_button\n    self.assert_element_text(element_dict)\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 225, in assert_element_text\n    element = self.get_element(element_info, wait_type=wait_type)['element']\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 164, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'Reference element' is not clickable", "status": "passed", "start": 1729340866789, "stop": 1729340866789}], "start": 1729340806173, "stop": 1729340866789}, {"name": "Screen taken: tests_test_tariff_attach_lkp.py_test_tariff_attach_client_lkp[lkp]_2024.10.19.12.27.46.png", "status": "passed", "attachments": [{"name": "Screenshot", "source": "6fa27f27-4261-45bb-a4c9-635b7ede43a7-attachment.png", "type": "image/png"}], "start": 1729340866932, "stop": 1729340866932}], "parameters": [{"name": "base_fixture", "value": "'lkp'"}], "start": 1729340800486, "stop": 1729340866791, "uuid": "b3048d82-9ae0-4ca4-aaa5-10d0727eb57d", "historyId": "3c9bde12438da3b212912e15f531b490", "testCaseId": "4f2192e7482c2029e9500392853f0780", "fullName": "tests.test_tariff_attach_lkp#test_tariff_attach_client_lkp", "labels": [{"name": "story", "value": "Critical path test"}, {"name": "feature", "value": "Прикрепление тарифов"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_tariff_attach_lkp"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "14196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_tariff_attach_lkp"}]}