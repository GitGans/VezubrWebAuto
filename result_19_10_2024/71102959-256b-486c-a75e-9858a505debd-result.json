{"name": "test_insurance_contract_attach_lkp[lkp]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'Option 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'' is not clickable", "trace": "self = <pages.contractor_page.Contractor object at 0x000001FC2EE3A650>\nelement_info = {'name': \"Option 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'\", 'xpath': \"(.//li[@role='option' and normalize-space(.)='Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'])[1]\"}\nwait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition((By.XPATH, element_info['xpath'])))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n>               element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n\nbase\\base_class.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b6dc649e14e715a39f43146c88107baa\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001FC2EE17100>, message = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7ED1BB125+29573]\nE       \t(No symbol) [0x00007FF7ED12FF50]\nE       \t(No symbol) [0x00007FF7ECFEB6EA]\nE       \t(No symbol) [0x00007FF7ED03F815]\nE       \t(No symbol) [0x00007FF7ED03FA6C]\nE       \t(No symbol) [0x00007FF7ED08B917]\nE       \t(No symbol) [0x00007FF7ED06733F]\nE       \t(No symbol) [0x00007FF7ED0886BC]\nE       \t(No symbol) [0x00007FF7ED0670A3]\nE       \t(No symbol) [0x00007FF7ED0312DF]\nE       \t(No symbol) [0x00007FF7ED032441]\nE       \tGetHandleVerifier [0x00007FF7ED4EC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF7ED537B67+3685831]\nE       \tGetHandleVerifier [0x00007FF7ED52CF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF7ED27B2A6+816390]\nE       \t(No symbol) [0x00007FF7ED13B25F]\nE       \t(No symbol) [0x00007FF7ED137084]\nE       \t(No symbol) [0x00007FF7ED137220]\nE       \t(No symbol) [0x00007FF7ED12607F]\nE       \tBaseThreadInitThunk [0x00007FFE26487374+20]\nE       \tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001FC2EE3B610>, <pages.sidebar.SideBar object at 0x000001FC2EE3B110>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Прикрепление и открепление договоров страхования')\n    @allure.description('ЛКП. Тест прикрепления и открепления договора страхования к ГВ')\n    @pytest.mark.parametrize('base_fixture', ['lkp'], indirect=True)  # Параметризация роли\n    def test_insurance_contract_attach_lkp(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку клиентов\n        sidebar.click_button(sidebar.clients_list_button, do_assert=True, wait=\"lst\")\n    \n        client_list = ClientsList(base.driver)\n        # Клик по клиенту с ИНН \"client_lkz_inn\"\n        client_list.click_button(client_list.client_lkz_inn, wait=\"form\")\n    \n        contractor = Contractor(base.driver)\n        # Переход на вкладку настроек контрагента\n        contractor.click_button(contractor.settings_tab)\n        # Разворачивание списка договоров страхования\n        contractor.click_button(contractor.insurance_expandable_list)\n        # Выбор страховой компании \"Энергогарант\"\n        contractor.dropdown_without_input(contractor.insurance_company_select, \"Энергогарант\")\n        # Выбор конкретного договора страхования\n>       contractor.dropdown_without_input(contractor.insurance_contract_select,\n                                              \"Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024\")\n\ntests\\test_insurance_operations.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:441: in dropdown_without_input\n    option_to_select = self.get_element({\"name\": f\"Option '{option_text}'\", \"xpath\": xpath_expression})[\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.contractor_page.Contractor object at 0x000001FC2EE3A650>\nelement_info = {'name': \"Option 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'\", 'xpath': \"(.//li[@role='option' and normalize-space(.)='Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'])[1]\"}\nwait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'. По умолчанию 'clickable'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            wait_conditions = {\n                'clickable': EC.element_to_be_clickable,\n                'visible': EC.visibility_of_element_located,\n                'located': EC.presence_of_element_located,\n                'find': lambda locator: self.driver.find_element(*locator),\n                'invisibility': EC.invisibility_of_element_located\n            }\n    \n            if wait_type not in wait_conditions:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            condition = wait_conditions[wait_type]\n    \n            if wait_type == 'invisibility':\n                # Ожидание невидимости элемента с заданным таймаутом\n                WebDriverWait(self.driver, 15).until(condition((By.XPATH, element_info['xpath'])))\n                element = None  # Возвращаем None, так как элемент невидим\n            else:\n                # Ожидание для остальных типов\n                element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = f\"Element '{element_info['name']}' is not {wait_type}\"\n            # Шаг в Allure и вывод в консоль\n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'Option 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'' is not clickable\n\nbase\\base_class.py:164: TimeoutException"}, "description": "ЛКП. Тест прикрепления и открепления договора страхования к ГВ", "steps": [{"name": "Click on clients_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1729483468458, "stop": 1729483468459}], "start": 1729483467737, "stop": 1729483468459}, {"name": "Click on client_lkz_inn", "status": "passed", "start": 1729483468459, "stop": 1729483469611}, {"name": "Click on settings_tab", "status": "passed", "start": 1729483469611, "stop": 1729483469690}, {"name": "Click on insurance_expandable_list", "status": "passed", "start": 1729483469690, "stop": 1729483469753}, {"name": "Select 'Энергогарант' from dropdown insurance_company_select", "status": "passed", "start": 1729483469753, "stop": 1729483470898}, {"name": "Select 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024' from dropdown insurance_contract_select", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'Option 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 441, in dropdown_without_input\n    option_to_select = self.get_element({\"name\": f\"Option '{option_text}'\", \"xpath\": xpath_expression})[\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 164, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'Option 'Договор №№-20240621181730 «Н-20240621181730» от 21.06.2024'' is not clickable", "status": "passed", "start": 1729483530984, "stop": 1729483530984}], "start": 1729483470898, "stop": 1729483530984}, {"name": "Screen taken: tests_test_insurance_operations.py_test_insurance_contract_attach_lkp[lkp]_2024.10.21.04.05.31.png", "status": "passed", "attachments": [{"name": "Screenshot", "source": "12cb81f1-f1ce-49c7-b659-e2b25b5a33cd-attachment.png", "type": "image/png"}], "start": 1729483531340, "stop": 1729483531345}], "parameters": [{"name": "base_fixture", "value": "'lkp'"}], "start": 1729483467737, "stop": 1729483530987, "uuid": "8cc9ab6c-1836-42c5-b4f0-7f293beccc60", "historyId": "02c07f094a2c78edd296ecedc2f3b901", "testCaseId": "72d39007648f847170551edfd38ccfe7", "fullName": "tests.test_insurance_operations#test_insurance_contract_attach_lkp", "labels": [{"name": "feature", "value": "Прикрепление и открепление договоров страхования"}, {"name": "story", "value": "Smoke test"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_insurance_operations"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "6416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_insurance_operations"}]}