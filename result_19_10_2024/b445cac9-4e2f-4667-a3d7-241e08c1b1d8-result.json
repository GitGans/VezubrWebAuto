{"name": "test_insurance_contract_attach_lkp[lkp]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7ED1BB125+29573]\n\t(No symbol) [0x00007FF7ED12FF50]\n\t(No symbol) [0x00007FF7ECFEB6EA]\n\t(No symbol) [0x00007FF7ECFBFCD5]\n\t(No symbol) [0x00007FF7ED06EF67]\n\t(No symbol) [0x00007FF7ED087FC1]\n\t(No symbol) [0x00007FF7ED0670A3]\n\t(No symbol) [0x00007FF7ED0312DF]\n\t(No symbol) [0x00007FF7ED032441]\n\tGetHandleVerifier [0x00007FF7ED4EC76D+3377613]\n\tGetHandleVerifier [0x00007FF7ED537B67+3685831]\n\tGetHandleVerifier [0x00007FF7ED52CF8B+3641835]\n\tGetHandleVerifier [0x00007FF7ED27B2A6+816390]\n\t(No symbol) [0x00007FF7ED13B25F]\n\t(No symbol) [0x00007FF7ED137084]\n\t(No symbol) [0x00007FF7ED137220]\n\t(No symbol) [0x00007FF7ED12607F]\n\tBaseThreadInitThunk [0x00007FFE26487374+20]\n\tRtlUserThreadStart [0x00007FFE27CBCC91+33]", "trace": "base_fixture = (<base.base_class.Base object at 0x000002860CBFF310>, <pages.sidebar.SideBar object at 0x000002860CEBEB10>), domain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Прикрепление и открепление договоров страхования')\n    @allure.description('ЛКП. Тест прикрепления и открепления договора страхования к ГВ')\n    @pytest.mark.parametrize('base_fixture', ['lkp'], indirect=True)  # Параметризация роли\n    def test_insurance_contract_attach_lkp(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку клиентов\n        sidebar.click_button(sidebar.clients_list_button, do_assert=True, wait=\"lst\")\n    \n        client_list = ClientsList(base.driver)\n        # Клик по клиенту с ИНН \"client_lkz_inn\"\n        client_list.click_button(client_list.client_lkz_inn, wait=\"form\")\n    \n        contractor = Contractor(base.driver)\n        # Переход на вкладку настроек контрагента\n        contractor.click_button(contractor.settings_tab)\n        # Разворачивание списка договоров страхования\n        contractor.click_button(contractor.insurance_expandable_list)\n        # Выбор страховой компании \"Энергогарант\"\n        contractor.dropdown_without_input(contractor.insurance_company_select, \"Энергогарант\")\n        # Выбор конкретного договора страхования\n>       contractor.dropdown_without_input(contractor.insurance_contract_select,\n                                              \"Договор №№-20240721102631 «Н-20240721102631» от 21.07.2024\")\n\ntests\\test_insurance_operations.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:441: in dropdown_without_input\n    option_to_select = self.get_element({\"name\": f\"Option '{option_text}'\", \"xpath\": xpath_expression})[\nbase\\base_class.py:155: in get_element\n    element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002860CD60050>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7ED12607F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE26487374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE27CBCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7ED1BB125+29573]\nE       \t(No symbol) [0x00007FF7ED12FF50]\nE       \t(No symbol) [0x00007FF7ECFEB6EA]\nE       \t(No symbol) [0x00007FF7ECFBFCD5]\nE       \t(No symbol) [0x00007FF7ED06EF67]\nE       \t(No symbol) [0x00007FF7ED087FC1]\nE       \t(No symbol) [0x00007FF7ED0670A3]\nE       \t(No symbol) [0x00007FF7ED0312DF]\nE       \t(No symbol) [0x00007FF7ED032441]\nE       \tGetHandleVerifier [0x00007FF7ED4EC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF7ED537B67+3685831]\nE       \tGetHandleVerifier [0x00007FF7ED52CF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF7ED27B2A6+816390]\nE       \t(No symbol) [0x00007FF7ED13B25F]\nE       \t(No symbol) [0x00007FF7ED137084]\nE       \t(No symbol) [0x00007FF7ED137220]\nE       \t(No symbol) [0x00007FF7ED12607F]\nE       \tBaseThreadInitThunk [0x00007FFE26487374+20]\nE       \tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "ЛКП. Тест прикрепления и открепления договора страхования к ГВ", "steps": [{"name": "Click on clients_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1729485764003, "stop": 1729485764003}], "start": 1729485763278, "stop": 1729485764003}, {"name": "Click on client_lkz_inn", "status": "passed", "start": 1729485764003, "stop": 1729485765192}, {"name": "Click on settings_tab", "status": "passed", "start": 1729485765192, "stop": 1729485765268}, {"name": "Click on insurance_expandable_list", "status": "passed", "start": 1729485765268, "stop": 1729485765341}, {"name": "Select 'Энергогарант' from dropdown insurance_company_select", "status": "passed", "start": 1729485765341, "stop": 1729485766497}, {"name": "Select 'Договор №№-20241019112435 «Н-20241019112436»  от 19.10.2024' from dropdown insurance_contract_select", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7ED1BB125+29573]\n\t(No symbol) [0x00007FF7ED12FF50]\n\t(No symbol) [0x00007FF7ECFEB6EA]\n\t(No symbol) [0x00007FF7ECFBFCD5]\n\t(No symbol) [0x00007FF7ED06EF67]\n\t(No symbol) [0x00007FF7ED087FC1]\n\t(No symbol) [0x00007FF7ED0670A3]\n\t(No symbol) [0x00007FF7ED0312DF]\n\t(No symbol) [0x00007FF7ED032441]\n\tGetHandleVerifier [0x00007FF7ED4EC76D+3377613]\n\tGetHandleVerifier [0x00007FF7ED537B67+3685831]\n\tGetHandleVerifier [0x00007FF7ED52CF8B+3641835]\n\tGetHandleVerifier [0x00007FF7ED27B2A6+816390]\n\t(No symbol) [0x00007FF7ED13B25F]\n\t(No symbol) [0x00007FF7ED137084]\n\t(No symbol) [0x00007FF7ED137220]\n\t(No symbol) [0x00007FF7ED12607F]\n\tBaseThreadInitThunk [0x00007FFE26487374+20]\n\tRtlUserThreadStart [0x00007FFE27CBCC91+33]\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 441, in dropdown_without_input\n    option_to_select = self.get_element({\"name\": f\"Option '{option_text}'\", \"xpath\": xpath_expression})[\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 155, in get_element\n    element = WebDriverWait(self.driver, 60).until(condition((By.XPATH, element_info['xpath'])))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 92, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 355, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1729485766497, "stop": 1729485803753}], "parameters": [{"name": "base_fixture", "value": "'lkp'"}], "start": 1729485763278, "stop": 1729485803757, "uuid": "b982305b-912f-464c-bfaa-9dc54a7ed547", "testCaseId": "72d39007648f847170551edfd38ccfe7", "fullName": "tests.test_insurance_operations#test_insurance_contract_attach_lkp"}