{"name": "test_delegation_client_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'save_delegation_button' is not clickable", "trace": "self = <pages.contractor_page.Contractor object at 0x000001CA2BA9FF90>\nelement_info = {'name': 'save_delegation_button', 'xpath': \"//button[@class='ant-btn settings-btn ant-btn-primary']\"}\nwait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n>               element = WebDriverWait(self.driver, 60).until(\n\nbase\\base_class.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"95d7cff4b28712e5d24a1848a2093061\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001CA2BA3FE20>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbase_fixture = (<base.base_class.Base object at 0x000001CA2BA85A10>, <pages.sidebar.SideBar object at 0x000001CA2BA86110>)\ndomain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Делегирование прав управления ЛК')\n    @allure.description('ЛКЭ. Тест делегирования пользователю права управления ЛК ГВ: '\n                        'делегируем - Второму, отменяем - Третьему')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_delegation_client_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку клиентов\n        sidebar.move_and_click(move_to=sidebar.contractor_hover, click_to=sidebar.clients_list_button,\n                               do_assert=True, wait=\"lst\")\n    \n        client_list = ClientsList(base.driver)\n        # Клик по клиенту с ИНН \"client_lkz_inn\"\n        client_list.click_button(client_list.client_lkz_inn, wait=\"lst\")\n    \n        contractor = Contractor(base.driver)\n        # Переход на вкладку настроек\n        contractor.click_button(contractor.settings_tab)\n        # Делегирование пользователю (1-й в списке не выбранный) права управления ЛК\n        contractor.click_button(contractor.user_checkbox_empty, 1)\n        contractor.click_button(contractor.save_delegation_button, do_assert=True)\n        contractor.click_button(contractor.ok_button)\n        # Отмена делегирования пользователю (4-й в списке)\n        contractor.click_button(contractor.user_checkbox_filled, 4)\n>       contractor.click_button(contractor.save_delegation_button, do_assert=True)\n\ntests\\test_delegation_to_user_lke.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:414: in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.contractor_page.Contractor object at 0x000001CA2BA9FF90>\nelement_info = {'name': 'save_delegation_button', 'xpath': \"//button[@class='ant-btn settings-btn ant-btn-primary']\"}\nwait_type = 'clickable'\n\n    def get_element(self, element_info: Dict[str, str], wait_type: str = 'clickable') -> Dict[str, Any]:\n        \"\"\"\n        Ожидает элемент в зависимости от выбранного типа ожидания и возвращает его.\n    \n        Parameters\n        ----------\n        element_info : dict\n            Информация о локаторе элемента.\n        wait_type : str, optional\n            Тип ожидания: 'clickable', 'visible', 'located', 'find', или 'invisibility'.\n    \n        Returns\n        -------\n        dict\n            Словарь с информацией о найденном элементе.\n        \"\"\"\n        try:\n            if wait_type == 'clickable':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.element_to_be_clickable((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'visible':\n                element = WebDriverWait(self.driver, 15).until(\n                    EC.visibility_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'located':\n                element = WebDriverWait(self.driver, 60).until(\n                    EC.presence_of_element_located((By.XPATH, element_info['xpath'])))\n            elif wait_type == 'find':\n                element = self.driver.find_element(By.XPATH, element_info['xpath'])\n            elif wait_type == 'invisibility':\n                WebDriverWait(self.driver, 60).until(\n                    EC.invisibility_of_element_located((By.XPATH, element_info['xpath'])))\n                element = None\n            else:\n                raise ValueError(f\"Unsupported wait type: {wait_type}\")\n    \n            return {'name': element_info['name'], 'element': element}\n    \n        except TimeoutException:\n            message = \"\"\n            if wait_type == 'clickable':\n                message = f\"Element '{element_info['name']}' is not clickable\"\n            elif wait_type == 'visible':\n                message = f\"Element '{element_info['name']}' is not visible\"\n                with allure.step(message):\n                    print(message)\n                # Возвращаем None, чтобы тест продолжился\n                return {'name': element_info['name'], 'element': None}\n            elif wait_type == 'located':\n                message = f\"Element '{element_info['name']}' is not located\"\n            elif wait_type == 'find':\n                message = f\"Element '{element_info['name']}' is not found\"\n            elif wait_type == 'invisibility':\n                message = f\"Element '{element_info['name']}' is not invisible\"\n    \n            with allure.step(message):\n                print(message)\n>           raise TimeoutException(message)\nE           selenium.common.exceptions.TimeoutException: Message: Element 'save_delegation_button' is not clickable\n\nbase\\base_class.py:174: TimeoutException"}, "description": "ЛКЭ. Тест делегирования пользователю права управления ЛК ГВ: делегируем - Второму, отменяем - Третьему", "steps": [{"name": "Move to contractor_hover", "status": "passed", "start": 1728208257465, "stop": 1728208260519}, {"name": "Click on clients_list_button", "status": "passed", "steps": [{"name": "Assert \"Список контрагентов\" == \"Список контрагентов\"", "status": "passed", "start": 1728208274240, "stop": 1728208274240}], "start": 1728208260620, "stop": 1728208274240}, {"name": "Click on client_lkz_inn", "status": "passed", "start": 1728208274240, "stop": 1728208286024}, {"name": "Click on settings_tab", "status": "passed", "start": 1728208286024, "stop": 1728208286228}, {"name": "Click on user_checkbox_empty", "status": "passed", "start": 1728208286228, "stop": 1728208296605}, {"name": "Click on save_delegation_button", "status": "passed", "steps": [{"name": "Assert \"Изменения сохранены\" == \"Изменения сохранены\"", "status": "passed", "start": 1728208298688, "stop": 1728208298689}], "start": 1728208296605, "stop": 1728208298689}, {"name": "Click on calendar_ok_button", "status": "passed", "start": 1728208298689, "stop": 1728208298920}, {"name": "Click on user_checkbox_filled index 4", "status": "passed", "start": 1728208298920, "stop": 1728208299265}, {"name": "Click on save_delegation_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element 'save_delegation_button' is not clickable\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 414, in click_button\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 174, in get_element\n    raise TimeoutException(message)\n"}, "steps": [{"name": "Element 'save_delegation_button' is not clickable", "status": "passed", "start": 1728208366402, "stop": 1728208366402}], "start": 1728208299265, "stop": 1728208366402}, {"name": "Screen taken: tests_test_delegation_to_user_lke.py_test_delegation_client_lke[lke]_2024.10.06.09.52.48.png", "status": "passed", "start": 1728208371218, "stop": 1728208371219}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1728208257465, "stop": 1728208366413, "uuid": "14d83ca1-bbf8-483e-b00b-4918e48a8c1c", "historyId": "ced34d04322b966540bc3b2551203f91", "testCaseId": "e618b7a463e5fdb4d0b56599eedaf1aa", "fullName": "tests.test_delegation_to_user_lke#test_delegation_client_lke", "labels": [{"name": "story", "value": "Smoke test"}, {"name": "feature", "value": "Делегирование прав управления ЛК"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_delegation_to_user_lke"}, {"name": "host", "value": "DESKTOP-J5EC1KL"}, {"name": "thread", "value": "18112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_delegation_to_user_lke"}]}