{"name": "test_go_to_account_producer_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF62FB3B125+29573]\n\t(No symbol) [0x00007FF62FAAFF50]\n\t(No symbol) [0x00007FF62F96B519]\n\t(No symbol) [0x00007FF62F953E8B]\n\t(No symbol) [0x00007FF62F951D65]\n\t(No symbol) [0x00007FF62F9525BF]\n\t(No symbol) [0x00007FF62F9610CE]\n\t(No symbol) [0x00007FF62F979F54]\n\t(No symbol) [0x00007FF62FA08805]\n\t(No symbol) [0x00007FF62F9E70A3]\n\t(No symbol) [0x00007FF62F9B12DF]\n\t(No symbol) [0x00007FF62F9B2441]\n\tGetHandleVerifier [0x00007FF62FE6C76D+3377613]\n\tGetHandleVerifier [0x00007FF62FEB7B67+3685831]\n\tGetHandleVerifier [0x00007FF62FEACF8B+3641835]\n\tGetHandleVerifier [0x00007FF62FBFB2A6+816390]\n\t(No symbol) [0x00007FF62FABB25F]\n\t(No symbol) [0x00007FF62FAB7084]\n\t(No symbol) [0x00007FF62FAB7220]\n\t(No symbol) [0x00007FF62FAA607F]\n\tBaseThreadInitThunk [0x00007FFEF1907374+20]\n\tRtlUserThreadStart [0x00007FFEF389CC91+33]", "trace": "request = <SubRequest 'base_fixture' for <Function test_go_to_account_producer_lke[lke]>>\ndomain = 'com'\n\n    @pytest.fixture\n    def base_fixture(request, domain):\n        # Ищем директорию, которая начинается с 'results_'\n        allure_dir = None\n        for dir_name in os.listdir('.'):\n            if dir_name.startswith('results_') and os.path.isdir(dir_name):\n                allure_dir = os.path.abspath(dir_name)  # Сохраняем путь к найденной директории\n                print(f\"Allure directory found and set: {allure_dir}\")\n                break\n    \n        # Получаем параметр из теста, который определяет тип теста и роль\n        role = request.param\n    \n        # Логика для выбора базового теста\n        if role == 'without_login':\n            base, login = base_test_without_login(domain)\n            base.allure_dir = allure_dir  # Устанавливаем директорию в base\n            yield base, login  # Возвращаем base и login вместо sidebar\n        elif role == 'via_link':\n            base, login = base_test_with_login_via_link(domain)\n            base.allure_dir = allure_dir  # Устанавливаем директорию в base\n            yield base, login  # Возвращаем base и login вместо sidebar\n        else:\n>           base, sidebar = base_test_with_login(domain, role)\n\ntests\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\base_test.py:10: in base_test_with_login\n    login.authorization(role)\npages\\login_page.py:65: in authorization\n    self.click_button(self.login_button)\nbase\\base_class.py:415: in click_button\n    button_dict['element'].click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CBF69C5090>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...07FF62FAA607F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEF1907374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEF389CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF62FB3B125+29573]\nE       \t(No symbol) [0x00007FF62FAAFF50]\nE       \t(No symbol) [0x00007FF62F96B519]\nE       \t(No symbol) [0x00007FF62F953E8B]\nE       \t(No symbol) [0x00007FF62F951D65]\nE       \t(No symbol) [0x00007FF62F9525BF]\nE       \t(No symbol) [0x00007FF62F9610CE]\nE       \t(No symbol) [0x00007FF62F979F54]\nE       \t(No symbol) [0x00007FF62FA08805]\nE       \t(No symbol) [0x00007FF62F9E70A3]\nE       \t(No symbol) [0x00007FF62F9B12DF]\nE       \t(No symbol) [0x00007FF62F9B2441]\nE       \tGetHandleVerifier [0x00007FF62FE6C76D+3377613]\nE       \tGetHandleVerifier [0x00007FF62FEB7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF62FEACF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF62FBFB2A6+816390]\nE       \t(No symbol) [0x00007FF62FABB25F]\nE       \t(No symbol) [0x00007FF62FAB7084]\nE       \t(No symbol) [0x00007FF62FAB7220]\nE       \t(No symbol) [0x00007FF62FAA607F]\nE       \tBaseThreadInitThunk [0x00007FFEF1907374+20]\nE       \tRtlUserThreadStart [0x00007FFEF389CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "ЛКЭ. Тест перехода в ЛК делегировавшего ПВ: пв - auto LKP", "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1728208253666, "stop": 1728208253666, "uuid": "9896739b-7e7a-45e2-b76b-6a94c26785e5", "testCaseId": "cc16e13c8fa6c8ccb9d94710522fc98f", "fullName": "tests.test_delegation_to_user_lke#test_go_to_account_producer_lke"}