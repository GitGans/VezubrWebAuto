{"name": "test_inner_driver_add_lke[lke]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF62FB3B125+29573]\n\t(No symbol) [0x00007FF62FAAFF50]\n\t(No symbol) [0x00007FF62F96B519]\n\t(No symbol) [0x00007FF62F953E8B]\n\t(No symbol) [0x00007FF62F951D65]\n\t(No symbol) [0x00007FF62F9525BF]\n\t(No symbol) [0x00007FF62F9610CE]\n\t(No symbol) [0x00007FF62F979B8D]\n\t(No symbol) [0x00007FF62F97F71A]\n\t(No symbol) [0x00007FF62F952D24]\n\t(No symbol) [0x00007FF62F9796DB]\n\t(No symbol) [0x00007FF62FA08A01]\n\t(No symbol) [0x00007FF62F9E70A3]\n\t(No symbol) [0x00007FF62F9B12DF]\n\t(No symbol) [0x00007FF62F9B2441]\n\tGetHandleVerifier [0x00007FF62FE6C76D+3377613]\n\tGetHandleVerifier [0x00007FF62FEB7B67+3685831]\n\tGetHandleVerifier [0x00007FF62FEACF8B+3641835]\n\tGetHandleVerifier [0x00007FF62FBFB2A6+816390]\n\t(No symbol) [0x00007FF62FABB25F]\n\t(No symbol) [0x00007FF62FAB7084]\n\t(No symbol) [0x00007FF62FAB7220]\n\t(No symbol) [0x00007FF62FAA607F]\n\tBaseThreadInitThunk [0x00007FFEF1907374+20]\n\tRtlUserThreadStart [0x00007FFEF389CC91+33]", "trace": "base_fixture = (<base.base_class.Base object at 0x00000236B7B10F10>, <pages.sidebar.SideBar object at 0x00000236B7B38E10>)\ndomain = 'com'\n\n    @allure.story(\"Smoke test\")\n    @allure.feature('Создание и операции с водителями')\n    @allure.description('ЛКЭ. Тест создания водителя внутр КА: ка - Первыйй в списке, ФИО - ВФИО-timestamp, '\n                        'паспорт/права - РФ, № паспорт/код/права/тлф. - Рандом, добавить/убрать - 2 и 1 ТС, '\n                        'работа - останавливаем/востанавливаем/увольняем')\n    @pytest.mark.parametrize('base_fixture', ['lke'], indirect=True)  # Параметризация роли\n    def test_inner_driver_add_lke(base_fixture, domain):\n        # Инициализация базовых объектов через фикстуру\n        base, sidebar = base_fixture\n    \n        # Переход к списку водителей\n>       sidebar.move_and_click(move_to=sidebar.directories_hover, click_to=sidebar.drivers_list_button,\n                               do_assert=True, wait=\"lst\")\n\ntests\\test_driver_add_lke.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_class.py:796: in move_and_click\n    self.move_to_element(move_to, index=move_index, wait_type=move_wait_type)\nbase\\base_class.py:557: in move_to_element\n    button_dict = self.get_element(updated_element_dict, wait_type)\nbase\\base_class.py:136: in get_element\n    element = WebDriverWait(self.driver, 60).until(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000236B7B38490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...07FF62FAA607F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEF1907374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEF389CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF62FB3B125+29573]\nE       \t(No symbol) [0x00007FF62FAAFF50]\nE       \t(No symbol) [0x00007FF62F96B519]\nE       \t(No symbol) [0x00007FF62F953E8B]\nE       \t(No symbol) [0x00007FF62F951D65]\nE       \t(No symbol) [0x00007FF62F9525BF]\nE       \t(No symbol) [0x00007FF62F9610CE]\nE       \t(No symbol) [0x00007FF62F979B8D]\nE       \t(No symbol) [0x00007FF62F97F71A]\nE       \t(No symbol) [0x00007FF62F952D24]\nE       \t(No symbol) [0x00007FF62F9796DB]\nE       \t(No symbol) [0x00007FF62FA08A01]\nE       \t(No symbol) [0x00007FF62F9E70A3]\nE       \t(No symbol) [0x00007FF62F9B12DF]\nE       \t(No symbol) [0x00007FF62F9B2441]\nE       \tGetHandleVerifier [0x00007FF62FE6C76D+3377613]\nE       \tGetHandleVerifier [0x00007FF62FEB7B67+3685831]\nE       \tGetHandleVerifier [0x00007FF62FEACF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF62FBFB2A6+816390]\nE       \t(No symbol) [0x00007FF62FABB25F]\nE       \t(No symbol) [0x00007FF62FAB7084]\nE       \t(No symbol) [0x00007FF62FAB7220]\nE       \t(No symbol) [0x00007FF62FAA607F]\nE       \tBaseThreadInitThunk [0x00007FFEF1907374+20]\nE       \tRtlUserThreadStart [0x00007FFEF389CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "ЛКЭ. Тест создания водителя внутр КА: ка - Первыйй в списке, ФИО - ВФИО-timestamp, паспорт/права - РФ, № паспорт/код/права/тлф. - Рандом, добавить/убрать - 2 и 1 ТС, работа - останавливаем/востанавливаем/увольняем", "steps": [{"name": "Move to directories_hover", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF62FB3B125+29573]\n\t(No symbol) [0x00007FF62FAAFF50]\n\t(No symbol) [0x00007FF62F96B519]\n\t(No symbol) [0x00007FF62F953E8B]\n\t(No symbol) [0x00007FF62F951D65]\n\t(No symbol) [0x00007FF62F9525BF]\n\t(No symbol) [0x00007FF62F9610CE]\n\t(No symbol) [0x00007FF62F979B8D]\n\t(No symbol) [0x00007FF62F97F71A]\n\t(No symbol) [0x00007FF62F952D24]\n\t(No symbol) [0x00007FF62F9796DB]\n\t(No symbol) [0x00007FF62FA08A01]\n\t(No symbol) [0x00007FF62F9E70A3]\n\t(No symbol) [0x00007FF62F9B12DF]\n\t(No symbol) [0x00007FF62F9B2441]\n\tGetHandleVerifier [0x00007FF62FE6C76D+3377613]\n\tGetHandleVerifier [0x00007FF62FEB7B67+3685831]\n\tGetHandleVerifier [0x00007FF62FEACF8B+3641835]\n\tGetHandleVerifier [0x00007FF62FBFB2A6+816390]\n\t(No symbol) [0x00007FF62FABB25F]\n\t(No symbol) [0x00007FF62FAB7084]\n\t(No symbol) [0x00007FF62FAB7220]\n\t(No symbol) [0x00007FF62FAA607F]\n\tBaseThreadInitThunk [0x00007FFEF1907374+20]\n\tRtlUserThreadStart [0x00007FFEF389CC91+33]\n\n", "trace": "  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 557, in move_to_element\n    button_dict = self.get_element(updated_element_dict, wait_type)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\base\\base_class.py\", line 136, in get_element\n    element = WebDriverWait(self.driver, 60).until(\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 92, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 355, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Gans\\PycharmProjects\\VezubrWebAuto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1728208582182, "stop": 1728208590036}], "parameters": [{"name": "base_fixture", "value": "'lke'"}], "start": 1728208582182, "stop": 1728208590045, "uuid": "214cd107-78a4-4e54-9d14-6d0ed052cbcc", "testCaseId": "90cf06e4823bcfa2809517f0a4a43631", "fullName": "tests.test_driver_add_lke#test_inner_driver_add_lke"}